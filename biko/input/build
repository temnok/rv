#!/usr/bin/env bash
set -e

SCRIPT_START=$(date +%s)
BM_START=$SCRIPT_START
CPU_COUNT=$(nproc)
QUIET=--quiet

export CCACHE_DIR=/home/user/cache/cc

function benchmark {
  BM_END=$(date +%s)
  echo $((($BM_END-$BM_START)/60))m $((($BM_END-$BM_START)%60))s
  BM_START=$BM_END
}

################################################################################

if [[ "${RV_XLEN}" == "32" ]]; then
    RV_ARCH=rv32imac
    RV_ABI=ilp32
else
    RV_XLEN=64
    RV_ARCH=rv64imac
    RV_ABI=lp64
fi

export ARCH=riscv
export CC="ccache riscv64-unknown-linux-gnu-gcc"
export CFLAGS="-march=${RV_ARCH} -mabi=${RV_ABI}"
export CROSS_COMPILE=riscv64-unknown-linux-gnu-

echo
echo "Target ${CFLAGS}"
echo "Using CPUs: ${CPU_COUNT}"

rm -rf build output && mkdir -p build output cache/{download,cc}

################################################################################

echo -n "Downloading sources... "
cd cache/download

VERSION_BUSYBOX=1.36.1
VERSION_KERNEL=6.15.7
VERSION_OPENSBI=1.7
#VERSION_GO=1.24.5

if [ ! -f busybox-${VERSION_BUSYBOX}.tar.bz2 ]; then
    wget $QUIET https://busybox.net/downloads/busybox-${VERSION_BUSYBOX}.tar.bz2
fi

if [ ! -f linux-${VERSION_KERNEL}.tar.xz ]; then
    wget $QUIET https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-${VERSION_KERNEL}.tar.xz
fi

if [ ! -f opensbi-${VERSION_OPENSBI}.tar.gz ]; then
    wget $QUIET https://github.com/riscv-software-src/opensbi/archive/refs/tags/v${VERSION_OPENSBI}.tar.gz
    mv v${VERSION_OPENSBI}.tar.gz opensbi-${VERSION_OPENSBI}.tar.gz
fi

if [[ "${VERSION_GO}" != "" ]] && [ ! -f go${VERSION_GO}.linux-riscv64.tar.gz ]; then
    wget $QUIET https://go.dev/dl/go${VERSION_GO}.linux-riscv64.tar.gz
fi

cd ~
benchmark

################################################################################

echo -n "Building busybox... "
tar -xf cache/download/busybox-${VERSION_BUSYBOX}.tar.bz2 && mv busybox-* build/busybox
cd build/busybox

KCONFIG_NOTIMESTAMP=1 \
    make $QUIET \
        defconfig \
        > /dev/null 2>&1

LDFLAGS="--static ${CFLAGS}" \
    make $QUIET \
        CC="${CC}" \
        --jobs=$CPU_COUNT \
        busybox \
        > /dev/null 2>&1

cd ~
benchmark

################################################################################

echo -n "Building initramfs... "
mkdir -p build/initramfs && cp -R input/initramfs build/initramfs/fs && cd build/initramfs/fs
mkdir bin && cp ~/build/busybox/busybox bin/

if [[ "${VERSION_GO}" != "" ]] && [[ "${RV_XLEN}" == "64" ]]; then
    mkdir -p usr/local
    tar -C usr/local -xf ~/cache/download/go*
fi

find . -exec touch -t 197001010000.00 {} +
find . ! -path . | sort | cpio \
    --reproducible --quiet --create --owner +0:+0 --format newc \
    > ../initramfs.cpio

cd ~
benchmark

################################################################################

echo -n "Building kernel... "
tar -xf cache/download/linux-${VERSION_KERNEL}.tar.xz && mv linux-* build/kernel

cd build/kernel

flags_y=(
    ARCH_RV${RV_XLEN}I BINFMT_ELF BINFMT_SCRIPT BLK_DEV_INITRD DEBUG_INFO DEBUG_INFO_DWARF5
    DEBUG_KERNEL DEVTMPFS DEVTMPFS_MOUNT GDB_SCRIPTS KGDB KGDB_SERIAL_CONSOLE NONPORTABLE
    RISCV_INTC RISCV_ISA_C SERIAL_SIFIVE SERIAL_SIFIVE_CONSOLE SIFIVE_PLIC TIMER_OF

    INITRAMFS_COMPRESSION_NONE
)

make $QUIET \
    allnoconfig

for f in ${flags_y[@]}; do
    scripts/config --set-val $f y
done

scripts/config --set-val INITRAMFS_SOURCE \"/home/user/build/initramfs/initramfs.cpio\"

make $QUIET \
    olddefconfig

make $QUIET \
    CC="${CC}" \
    KBUILD_BUILD_HOST="buildhost" \
    KBUILD_BUILD_TIMESTAMP="Thu Jan 1 00:00:00 UTC 1970" \
    KBUILD_BUILD_USER="builduser" \
    --jobs=$CPU_COUNT \
    Image

cd ~
benchmark

################################################################################

echo -n "Building opensbi... "
tar -xf cache/download/opensbi-${VERSION_OPENSBI}.tar.gz && mv opensbi-* build/opensbi
cd build/opensbi

sed "s/rv64/rv${RV_XLEN}/g" ~/input/rv.dts > rv.dts

dtc $QUIET \
  -O dtb \
  -o rv.dtb \
  rv.dts

make $QUIET \
  CC="${CC}" \
  FW_FDT_PATH=rv.dtb \
  FW_PAYLOAD_PATH=~/build/kernel/arch/riscv/boot/Image \
  PLATFORM=generic \
  PLATFORM_RISCV_XLEN=${RV_XLEN} \
  --jobs=$CPU_COUNT \
  > /dev/null 2>&1

gzip -9 -n -c build/platform/generic/firmware/fw_payload.bin > ~/output/biko.gz

cd ~
benchmark

################################################################################

sha256sum -b \
  build/busybox/busybox \
  build/initramfs/initramfs.cpio \
  build/kernel/arch/riscv/boot/Image \
  output/biko.gz > output/sha256.txt

echo -n "Total execution time: "
BM_START=$SCRIPT_START && benchmark
